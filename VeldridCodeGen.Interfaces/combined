using System;
using System.ComponentModel;
using Veldrid;

    public class ColorAttachmentAttribute : Attribute
    {
        public PixelFormat Format { get; }
        public ColorAttachmentAttribute(PixelFormat format) => Format = format;
    }
    public class DepthAttachmentAttribute : Attribute
    {
        public PixelFormat Format { get; }
        public DepthAttachmentAttribute(PixelFormat format) => Format = format;
    }
    public class FragmentShaderAttribute : Attribute
    {
        public Type Type { get; }
        public FragmentShaderAttribute(Type type) => Type = type ?? throw new ArgumentNullException(nameof(type));
    }
    public sealed class InputParamAttribute : Attribute
    {
        public InputParamAttribute(string name) => Name = name;
        public InputParamAttribute(string name, VertexElementFormat format)
        {
            Name = name;
            Format = format;
        }

        public string Name { get; }
        public VertexElementFormat Format { get; }
    }

    public interface IResourceSetHolder : IDisposable { ResourceSet ResourceSet { get; } }
    public interface IFramebufferHolder : IDisposable, INotifyPropertyChanged { uint Width { get; set; } uint Height { get; set; } Framebuffer Framebuffer { get; } }
    public interface IPipelineHolder : IDisposable { public Veldrid.Pipeline Pipeline { get; } public string Name { get; set; } }
    public interface ISamplerHolder : INotifyPropertyChanged, IDisposable { Sampler Sampler { get; } }
    public interface IBufferHolder : IDisposable { DeviceBuffer DeviceBuffer { get; } }
    public interface IResourceLayout : IDisposable { string Name { get; set; } } 
    public interface ITextureHolder : IDisposable, INotifyPropertyChanged {
        public Texture DeviceTexture { get; }
        public TextureView TextureView { get; } 
    }

    public interface IResourceLayoutSource { ResourceLayout Get(Type type, GraphicsDevice device); }
    public interface IShaderCache
    {
        event EventHandler<EventArgs> ShadersUpdated;
        string GetGlsl(string shaderName);
        void CleanupOldFiles();
        void DestroyAllDeviceObjects();
        IShaderCache AddShaderPath(string path);
        Shader[] GetShaderPair(ResourceFactory factory,
            string vertexShaderName, string fragmentShaderName,
            string vertexShaderContent = null, string fragmentShaderContent = null);
    }


    public interface IUniformFormat { }
    public interface IVertexFormat { }

    public sealed class ResourceAttribute : Attribute
    {
        public ResourceAttribute(string name)
        {
            Name = name;
            Stages = ShaderStages.Fragment | ShaderStages.Vertex;
        }

        public ResourceAttribute(string name, ShaderStages stages)
        {
            Name = name;
            Stages = stages;
        }

        public string Name { get; }
        public ShaderStages Stages { get; }
    }

    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)]
    public class ResourceSetAttribute : Attribute
    {
        public override object TypeId => this;
        public Type Type { get; }
        public ResourceSetAttribute(Type type) => Type = type;
    }

    [AttributeUsage(AttributeTargets.Enum)]
    public sealed class ShaderVisibleAttribute : Attribute {}

    public sealed class UniformAttribute : Attribute
    {
        public UniformAttribute(string name) => Name = name;

        public string Name { get; }
    }

    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)]
    public class VertexFormatAttribute : Attribute
    {
        public override object TypeId => this;
        public Type Type { get; }
        public int InstanceStep { get; set; }
        public VertexFormatAttribute(Type type) => Type = type;
    }

    public class VertexShaderAttribute : Attribute
    {
        public Type Type { get; }
        public VertexShaderAttribute(Type type) => Type = type ?? throw new ArgumentNullException(nameof(type));
    }
